# MIT License
#
# Copyright (c) 2018-2019 Red Hat, Inc.

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

---
- name: packit-service deployment
  hosts: all
  vars:
    deployment: "{{ lookup('env', 'DEPLOYMENT') }}"
    sandbox_namespace: "packit-{{ deployment }}-sandbox"
    without_fedmsg: false
    without_redis_commander: false
    without_flower: false
    # feel free to override this in vars
    image: "usercont/packit-service"
    image_worker: "usercont/packit-service-worker"
    image_fedmsg: "usercont/packit-service-fedmsg"
    worker_replicas: 2
    path_to_secrets: "../secrets"
    # to be used in Image streams as importPolicy:scheduled value
    auto_import_images: "{{(deployment != 'prod')}}"
  tasks:
    - name: include variables
      include_vars: ../vars/{{ deployment }}.yml
    - name: include extra secret vars
      include_vars: "{{ path_to_secrets }}/{{ deployment }}/extra-vars.yml"

    - block:
        - name: get kubeconfig token
          command: oc whoami -t
          register: kubeconfig_token
        - name: check if tokens match
          assert:
            that:
              - kubeconfig_token.stdout == api_key
            msg: "OpenShift API token defined in vars/ does not match token from your current environment."
      ignore_errors: yes

    - name: Deploy templates (need to be processed)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      loop:
        - "{{ lookup('template', '../openshift/secret-packit-ssh.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-packit-secrets.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-packit-config.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-sentry.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/secret-postgres.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/cmap-packit-httpd-conf.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/route.packit.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/sandbox-namespace.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/imagestream.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/imagestream-worker.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/imagestream-fedmsg.yml.j2') | from_yaml }}"

    - name: Deploy resource config - deployment (need to be processed)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      loop:
        - "{{ lookup('template', '../openshift/deployment.yml.j2') | from_yaml }}"
        - "{{ lookup('template', '../openshift/statefulset-worker.yml.j2') | from_yaml }}"

    - name: Deploy dashboard (no need to process)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        definition:  "{{ lookup('template', '../openshift/dashboard.yml')  }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      when: not without_dashboard

    - name: Deploy resource configs (no need to process them)
      # https://docs.ansible.com/k8s_module.html
      k8s:
        namespace: "{{ project }}"
        src: "{{ item }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      loop:
        - ../openshift/redis.yml
        - ../openshift/service.yml
        - ../openshift/pg.yml

    - name: Deploy redis-commander
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/redis-commander.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      when: not without_redis_commander

    - name: Deploy flower
      k8s:
        namespace: "{{ project }}"
        src: ../openshift/flower.yml
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      when: not without_flower

    - name: Deploy fedora messaging consumer
      k8s:
        namespace: "{{ project }}"
        definition: "{{ lookup('template', '../openshift/deployment-fedmsg.yml.j2') | from_yaml }}"
        host: "{{ host }}"
        api_key: "{{ api_key }}"
        verify_ssl: "{{ validate_certs }}" # 2.7 compatibility
      when: not without_fedmsg

    - name: Set up the sandbox namespace
      command: oc adm -n {{ sandbox_namespace }} policy add-role-to-user edit system:serviceaccount:{{ project }}:default
